package com.alexis.db;

import org.hsqldb.Server;
import org.hsqldb.lib.InOutUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.util.Arrays;
import java.util.List;
import java.util.zip.CRC32;

public class DBServer {
    private Server hsqlDbServer;
    private Connection connection;
    private static final String DB_URL = "jdbc:hsqldb:hsql://localhost/testdb";
    private static final String DRIVER_CLASS = "org.hsqldb.jdbc.JDBCDriver";
    private boolean initialized = false;
    private final boolean autoCommit = false;
    private static final Logger log = LoggerFactory.getLogger(DBServer.class);

    public void startDBServer(){
        if (hsqlDbServer==null){
            hsqlDbServer = new Server();
            hsqlDbServer.setDatabaseName(0, "testdb");
            hsqlDbServer.setDatabasePath(0,"mem:/tmp/hsqldb/testdb");
            hsqlDbServer.start();
            log.info("db server - started");
        }
    }

    public void shutDownDBServer() throws SQLException {
        log.info("shutting down db server");
        if (connection!=null){
            connection.close();
            log.info("db server - connection closed");
        }
        if (hsqlDbServer!=null){
            hsqlDbServer.shutdown();
            log.info("db server - shutdown successful");
        }
    }

    private void createHSQLDBConnection() throws SQLException, ClassNotFoundException {
        Class.forName(DRIVER_CLASS);
        connection = DriverManager.getConnection(DB_URL);
        connection.setAutoCommit(autoCommit);
        log.info("db server - connection created");
    }

    public void initializeDB() throws Exception {
        try {
            if (!initialized){
                startDBServer();
                createHSQLDBConnection();
                createTables();
                createRelationalTables();
                addForeignKeys();
                insertRows();
                this.initialized = true;
            }
        } catch (Exception e) {
            shutDownDBServer();
            throw e;
        }
    }

    private void dropTables() throws SQLException {
        String sql = "DROP TABLE IF EXISTS SERVERENVIRONMENTS";
        Statement st = null;
        try {
            st = connection.createStatement();
            st.executeUpdate(sql);
            connection.commit();
        }finally {
            if (st!=null)
                st.close();
        }
    }

    private void createTables() throws SQLException {
        String createEnvironmentsTableSQL = "CREATE TABLE SERVERENVIRONMENTS(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, NAME VARCHAR(100));";

        String createApplicationsTableSQL = "CREATE TABLE APPLICATIONS(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, NAME VARCHAR(100));";

        String createIPsTableSQL = "CREATE TABLE IPADDRESSES(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, ip VARCHAR(30));";

        String createClientsTableSQL = "CREATE TABLE CLIENTS(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, name VARCHAR(30));";

        String create = new StringBuilder().append(createEnvironmentsTableSQL)
                .append("\n")
                .append(createApplicationsTableSQL)
                .append("\n")
                .append(createIPsTableSQL)
                .append("\n")
                .append(createClientsTableSQL).toString();
        Statement statement = connection.createStatement();
        try {
            statement.executeUpdate(create);
            connection.commit();
        } finally {
            statement.close();
        }
    }

    private void createRelationalTables() throws SQLException {
        String createApplicationsEnvironmentsTable = "CREATE TABLE APPLICATIONSENVIRONMENTS(ENVIRONMENTID INTEGER, APPLICATIONID INTEGER); "+
                "CREATE TABLE IPWHITELISTS(ENVIRONMENTID INTEGER, APPLICATIONID INTEGER, IPADDRESSID INTEGER, CLIENTID INTEGER); " +
                "CREATE TABLE CLIENTSIPS(CLIENTID INTEGER, IPADDRESSID INTEGER); ";
        Statement statement = connection.createStatement();
        try {
            statement.executeUpdate(createApplicationsEnvironmentsTable);
            connection.commit();
        } finally {
            statement.close();
        }
    }

    private void addForeignKeys() throws SQLException {
        String addFKSql = "ALTER TABLE APPLICATIONSENVIRONMENTS ADD FOREIGN KEY (ENVIRONMENTID) REFERENCES SERVERENVIRONMENTS(ID); " +
                "ALTER TABLE APPLICATIONSENVIRONMENTS ADD FOREIGN KEY (APPLICATIONID) REFERENCES APPLICATIONS(ID); " +
                "ALTER TABLE APPLICATIONSENVIRONMENTS ADD CONSTRAINT UK_APPLICATIONSENVIRONMENTS UNIQUE(ENVIRONMENTID, APPLICATIONID); " +
                "ALTER TABLE CLIENTSIPS ADD FOREIGN KEY (CLIENTID) REFERENCES CLIENTS(ID); " +
                "ALTER TABLE CLIENTSIPS ADD FOREIGN KEY (IPADDRESSID) REFERENCES IPADDRESSES(ID); " +
                "ALTER TABLE CLIENTSIPS ADD CONSTRAINT UK_CLIENTSIPS UNIQUE(CLIENTID, IPADDRESSID); " +
                "ALTER TABLE IPWHITELISTS ADD FOREIGN KEY (ENVIRONMENTID) REFERENCES SERVERENVIRONMENTS(ID); " +
                "ALTER TABLE IPWHITELISTS ADD FOREIGN KEY (APPLICATIONID) REFERENCES APPLICATIONs(ID); " +
                "ALTER TABLE IPWHITELISTS ADD FOREIGN KEY (IPADDRESSID) REFERENCES IPADDRESSES(ID); " +
                "ALTER TABLE IPWHITELISTS ADD FOREIGN KEY (CLIENTID) REFERENCES CLIENTS(ID); " +
                "ALTER TABLE IPWHITELISTS ADD CONSTRAINT UK_IPWHITELISTS UNIQUE(ENVIRONMENTID, APPLICATIONID, IPADDRESSID, CLIENTID); ";
        Statement statement = connection.createStatement();
        try {
            statement.executeUpdate(addFKSql);
            connection.commit();
        } finally {
            statement.close();
        }
    }

    private void insertRows() throws SQLException {
        insertEnvironmentRows();
        insertApplicationRows();
        insertApplicationsEnvironmentsRows();
    }

    private void insertEnvironmentRows() throws SQLException {
        String row1 = "INSERT INTO SERVERENVIRONMENTS (name) VALUES('DEV');";
        String row2 = "INSERT INTO SERVERENVIRONMENTS (name) VALUES('STAGE');";
        String row3 = "INSERT INTO SERVERENVIRONMENTS (name) VALUES('PROD');";

        executeBatch(Arrays.asList(row1, row2, row3));
    }

    private void insertApplicationRows() throws SQLException {
        String app1 = "INSERT INTO APPLICATIONS (name) VALUES('app1');";
        String app2 = "INSERT INTO APPLICATIONS (name) VALUES('app2');";

        executeBatch(Arrays.asList(app1, app2));
    }

    private void insertApplicationsEnvironmentsRows() throws SQLException {
        String row1 = "INSERT INTO APPLICATIONSENVIRONMENTS VALUES (1,1)";
        String row2 = "INSERT INTO APPLICATIONSENVIRONMENTS VALUES (1,2)";
        String row3 = "INSERT INTO APPLICATIONSENVIRONMENTS VALUES (2,1)";
        String row4 = "INSERT INTO APPLICATIONSENVIRONMENTS VALUES (2,2)";
        String row5 = "INSERT INTO APPLICATIONSENVIRONMENTS VALUES (3,1)";
        String row6 = "INSERT INTO APPLICATIONSENVIRONMENTS VALUES (3,2)";

        executeBatch(Arrays.asList(row1, row2, row3, row4, row5, row6));
    }

    private void executeBatch(List<String> queries) throws SQLException {
        Statement statement = connection.createStatement();
        for (String query : queries) {
            statement.addBatch(query);
        }
        try {
            statement.executeBatch();
            connection.commit();
        } finally {
            statement.close();
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public Connection getOpenConnection() throws SQLException, ClassNotFoundException {
        if (connection == null || connection.isClosed()) {
            Class.forName(DRIVER_CLASS);
            connection = DriverManager.getConnection(DB_URL);
        }

        return connection;
    }
}
